package ${package.ServiceImpl};

import cc.mrbird.febs.common.domain.QueryRequest;
import cc.mrbird.febs.common.utils.SortUtil;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.time.LocalDate;
/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service("${table.serviceName}")
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true, rollbackFor = Exception.class)
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {


@Override
public IPage<${entity}> find${entity}s(QueryRequest request, ${entity} ${table.entityPath}){
        try{
        LambdaQueryWrapper<${entity}> queryWrapper=new LambdaQueryWrapper<>();
        queryWrapper.eq(${entity}::getIsDeletemark, 1);//1是未删 0是已删

        #foreach($field in ${table.fields})
                #if($cfg.searchFileds.contains($field.name))
                        #if($field.propertyType.indexOf("Date")!=-1)
                                if (StringUtils.isNotBlank(${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}From()) && StringUtils.isNotBlank(${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}To())) {
                                queryWrapper
                                .ge(${entity}::get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}, ${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}From())
                                .le(${entity}::get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}, ${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}To());
                                }
                        #end
                        #if("${field.propertyType}" == "String")
                                if (StringUtils.isNotBlank(${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}())) {
                                queryWrapper.like(${entity}::get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}, ${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}());
                                }
                        #end
                        #if("${field.propertyType}" == "Integer")
                                if (${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}()!=null) {
                                queryWrapper.eq(${entity}::get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}, ${table.entityPath}.get${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}());
                                }
                        #end
                #end
        #end

        Page<${entity}> page=new Page<>();
        SortUtil.handlePageSort(request,page,false);//true 是属性  false是数据库字段可两个
        return this.page(page,queryWrapper);
        }catch(Exception e){
        log.error("获取字典信息失败" ,e);
        return null;
        }
        }
@Override
public IPage<${entity}> find${entity}List (QueryRequest request, ${entity} ${table.entityPath}){
        try{
        Page<${entity}> page=new Page<>();
        SortUtil.handlePageSort(request,page,false);//true 是属性  false是数据库字段可两个
        return  this.baseMapper.find${entity}(page,${table.entityPath});
        }catch(Exception e){
        log.error("获取${table.comment}失败" ,e);
        return null;
        }
        }
@Override
@Transactional
public void create${entity}(${entity} ${table.entityPath}){
#foreach($field in ${table.fields})
#if(${field.keyFlag})
## 主键
        #if("${field.propertyType}" == "String")
        ${table.entityPath}.set${field.capitalName}(UUID.randomUUID().toString());
        #end
        #end
        #end
        ${table.entityPath}.setCreateTime(new Date());
        ${table.entityPath}.setIsDeletemark(1);
        this.save(${table.entityPath});
        }

@Override
@Transactional
public void update${entity}(${entity} ${table.entityPath}){
        ${table.entityPath}.setModifyTime(new Date());
        this.baseMapper.update${entity}(${table.entityPath});
        }

@Override
@Transactional
public void delete${entity}s(String[]Ids){
        List<String> list=Arrays.asList(Ids);
        this.baseMapper.deleteBatchIds(list);
        }


        }